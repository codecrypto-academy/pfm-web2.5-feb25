Para el sh
    Network Docker 176.45.10.0/24
        -2 Nodos validadores 
        -2 nodos normales -1 es bootnode que se llama con enode
    config.toml
    genesis.json


Pasos

docker network create nodosBesu

besu --data-path=nodo1 public-key export-address --to=nodo1/adress

Para el genesid, alloc es direccion de metamask, extraData es la del nodo validador

Config.toml
    contiene el bootnodes=["enode://publickey@ip:puerto]


comando levantar nodo
docker run -d \
--name nodo1 \
--network besuNodes \
-p 9999:8545 \
-v $(pwd): /data \
hyperledger/besu:latest \
--config-file=/data/config.toml \
--data-path=/data/node1/data \
--node-private-key-file=/data/node1/key \
--genesis-file=/data/genesis.json


get block by number
curl -s -X POST --data '{"jsonrcp":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H "Content-Type: application/json" http://localhost:9999 |jq '.result'

convert hexa to decimal
echo $((16#1a9))

get block number in decimal
echo $((16#$(curl -s -X POST --data '{"jsonrcp":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H "Content-Type: application/json" http://localhost:9999 |jq -r '.result' | sed 's/0x//')))

get balance
curl -X POST --data '{"jsonrcp":"2.0","method":"eth_getBalance","params":["0x0d81daa21ebd5d7b634640162df2c3d33616e243","latest"],"id":1}' -H "Content-Type: application/json" http://localhost:9999
curl -X POST --data '{"jsonrcp":"2.0","method":"eth_getBalance","params":["0x0d81daa21ebd5d7b634640162df2c3d33616e243","latest"],"id":1}' -H "Content-Type: application/json" http://localhost:9998
curl -X POST --data '{"jsonrcp":"2.0","method":"eth_getBalance","params":["0x466d74980abcc1dbda8ff5e97932c10fba87bb99","latest"],"id":1}' -H "Content-Type: application/json" http://localhost:9997
curl -X POST --data '{"jsonrcp":"2.0","method":"eth_getBalance","params":["0x33b062f0773401e95530a12c17923cb5712c42cb","latest"],"id":1}' -H "Content-Type: application/json" http://localhost:9996

0x591a162517bdb97caa3ba574bfb29e0e81b90675
0xd3040ac0bc95316ad39d5fdc022c767c322dc2fa
0x466d74980abcc1dbda8ff5e97932c10fba87bb99
0x33b062f0773401e95530a12c17923cb5712c42cb

get node info in json
curl -X POST --data '{"jsonrcp":"2.0","method":"admin_nodeInfo","params":[],"id":1}' -H "Content-Type: application/json" http://localhost:9996 | jq -r '.result.enode'





# Función para enviar una transacción firmada
send_raw_transaction() {
    local rpc_url=$1
    local signed_tx=$2

    local json_rpc_request='{
        "jsonrpc": "2.0",
        "method": "eth_sendRawTransaction",
        "params": ["'$signed_tx'"],
        "id": 1
    }'

    echo "Sending raw transaction to $rpc_url..."
    local response=$(curl -s -X POST --data "$json_rpc_request" -H "Content-Type: application/json" "$rpc_url")
    local hashTx=$(echo "$response" | jq -r '.result')

    if [ "$hashTx" != "null" ]; then
        echo "Transaction sent successfully! Transaction hash: $hashTx"
        echo "$hashTx"
    else
        echo "Failed to send transaction. Error: $(echo "$response" | jq -r '.error.message')"
        return 1
    fi
}

